// Code generated by ent, DO NOT EDIT.

package entschema

import (
	"context"
	"errors"
	"example/be/gen/entschema/photographcity"
	"example/be/gen/entschema/predicate"
	"fmt"
	"sync"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypePhotographCity = "PhotographCity"
)

// PhotographCityMutation represents an operation that mutates the PhotographCity nodes in the graph.
type PhotographCityMutation struct {
	config
	op            Op
	typ           string
	id            *int
	province_code *string
	province_name *string
	city_code     *string
	city_name     *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*PhotographCity, error)
	predicates    []predicate.PhotographCity
}

var _ ent.Mutation = (*PhotographCityMutation)(nil)

// photographcityOption allows management of the mutation configuration using functional options.
type photographcityOption func(*PhotographCityMutation)

// newPhotographCityMutation creates new mutation for the PhotographCity entity.
func newPhotographCityMutation(c config, op Op, opts ...photographcityOption) *PhotographCityMutation {
	m := &PhotographCityMutation{
		config:        c,
		op:            op,
		typ:           TypePhotographCity,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withPhotographCityID sets the ID field of the mutation.
func withPhotographCityID(id int) photographcityOption {
	return func(m *PhotographCityMutation) {
		var (
			err   error
			once  sync.Once
			value *PhotographCity
		)
		m.oldValue = func(ctx context.Context) (*PhotographCity, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().PhotographCity.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withPhotographCity sets the old PhotographCity of the mutation.
func withPhotographCity(node *PhotographCity) photographcityOption {
	return func(m *PhotographCityMutation) {
		m.oldValue = func(context.Context) (*PhotographCity, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m PhotographCityMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m PhotographCityMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("entschema: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *PhotographCityMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *PhotographCityMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().PhotographCity.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetProvinceCode sets the "province_code" field.
func (m *PhotographCityMutation) SetProvinceCode(s string) {
	m.province_code = &s
}

// ProvinceCode returns the value of the "province_code" field in the mutation.
func (m *PhotographCityMutation) ProvinceCode() (r string, exists bool) {
	v := m.province_code
	if v == nil {
		return
	}
	return *v, true
}

// OldProvinceCode returns the old "province_code" field's value of the PhotographCity entity.
// If the PhotographCity object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PhotographCityMutation) OldProvinceCode(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldProvinceCode is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldProvinceCode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldProvinceCode: %w", err)
	}
	return oldValue.ProvinceCode, nil
}

// ClearProvinceCode clears the value of the "province_code" field.
func (m *PhotographCityMutation) ClearProvinceCode() {
	m.province_code = nil
	m.clearedFields[photographcity.FieldProvinceCode] = struct{}{}
}

// ProvinceCodeCleared returns if the "province_code" field was cleared in this mutation.
func (m *PhotographCityMutation) ProvinceCodeCleared() bool {
	_, ok := m.clearedFields[photographcity.FieldProvinceCode]
	return ok
}

// ResetProvinceCode resets all changes to the "province_code" field.
func (m *PhotographCityMutation) ResetProvinceCode() {
	m.province_code = nil
	delete(m.clearedFields, photographcity.FieldProvinceCode)
}

// SetProvinceName sets the "province_name" field.
func (m *PhotographCityMutation) SetProvinceName(s string) {
	m.province_name = &s
}

// ProvinceName returns the value of the "province_name" field in the mutation.
func (m *PhotographCityMutation) ProvinceName() (r string, exists bool) {
	v := m.province_name
	if v == nil {
		return
	}
	return *v, true
}

// OldProvinceName returns the old "province_name" field's value of the PhotographCity entity.
// If the PhotographCity object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PhotographCityMutation) OldProvinceName(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldProvinceName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldProvinceName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldProvinceName: %w", err)
	}
	return oldValue.ProvinceName, nil
}

// ClearProvinceName clears the value of the "province_name" field.
func (m *PhotographCityMutation) ClearProvinceName() {
	m.province_name = nil
	m.clearedFields[photographcity.FieldProvinceName] = struct{}{}
}

// ProvinceNameCleared returns if the "province_name" field was cleared in this mutation.
func (m *PhotographCityMutation) ProvinceNameCleared() bool {
	_, ok := m.clearedFields[photographcity.FieldProvinceName]
	return ok
}

// ResetProvinceName resets all changes to the "province_name" field.
func (m *PhotographCityMutation) ResetProvinceName() {
	m.province_name = nil
	delete(m.clearedFields, photographcity.FieldProvinceName)
}

// SetCityCode sets the "city_code" field.
func (m *PhotographCityMutation) SetCityCode(s string) {
	m.city_code = &s
}

// CityCode returns the value of the "city_code" field in the mutation.
func (m *PhotographCityMutation) CityCode() (r string, exists bool) {
	v := m.city_code
	if v == nil {
		return
	}
	return *v, true
}

// OldCityCode returns the old "city_code" field's value of the PhotographCity entity.
// If the PhotographCity object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PhotographCityMutation) OldCityCode(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCityCode is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCityCode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCityCode: %w", err)
	}
	return oldValue.CityCode, nil
}

// ResetCityCode resets all changes to the "city_code" field.
func (m *PhotographCityMutation) ResetCityCode() {
	m.city_code = nil
}

// SetCityName sets the "city_name" field.
func (m *PhotographCityMutation) SetCityName(s string) {
	m.city_name = &s
}

// CityName returns the value of the "city_name" field in the mutation.
func (m *PhotographCityMutation) CityName() (r string, exists bool) {
	v := m.city_name
	if v == nil {
		return
	}
	return *v, true
}

// OldCityName returns the old "city_name" field's value of the PhotographCity entity.
// If the PhotographCity object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PhotographCityMutation) OldCityName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCityName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCityName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCityName: %w", err)
	}
	return oldValue.CityName, nil
}

// ResetCityName resets all changes to the "city_name" field.
func (m *PhotographCityMutation) ResetCityName() {
	m.city_name = nil
}

// Where appends a list predicates to the PhotographCityMutation builder.
func (m *PhotographCityMutation) Where(ps ...predicate.PhotographCity) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the PhotographCityMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *PhotographCityMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.PhotographCity, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *PhotographCityMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *PhotographCityMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (PhotographCity).
func (m *PhotographCityMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *PhotographCityMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.province_code != nil {
		fields = append(fields, photographcity.FieldProvinceCode)
	}
	if m.province_name != nil {
		fields = append(fields, photographcity.FieldProvinceName)
	}
	if m.city_code != nil {
		fields = append(fields, photographcity.FieldCityCode)
	}
	if m.city_name != nil {
		fields = append(fields, photographcity.FieldCityName)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *PhotographCityMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case photographcity.FieldProvinceCode:
		return m.ProvinceCode()
	case photographcity.FieldProvinceName:
		return m.ProvinceName()
	case photographcity.FieldCityCode:
		return m.CityCode()
	case photographcity.FieldCityName:
		return m.CityName()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *PhotographCityMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case photographcity.FieldProvinceCode:
		return m.OldProvinceCode(ctx)
	case photographcity.FieldProvinceName:
		return m.OldProvinceName(ctx)
	case photographcity.FieldCityCode:
		return m.OldCityCode(ctx)
	case photographcity.FieldCityName:
		return m.OldCityName(ctx)
	}
	return nil, fmt.Errorf("unknown PhotographCity field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PhotographCityMutation) SetField(name string, value ent.Value) error {
	switch name {
	case photographcity.FieldProvinceCode:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetProvinceCode(v)
		return nil
	case photographcity.FieldProvinceName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetProvinceName(v)
		return nil
	case photographcity.FieldCityCode:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCityCode(v)
		return nil
	case photographcity.FieldCityName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCityName(v)
		return nil
	}
	return fmt.Errorf("unknown PhotographCity field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *PhotographCityMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *PhotographCityMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PhotographCityMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown PhotographCity numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *PhotographCityMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(photographcity.FieldProvinceCode) {
		fields = append(fields, photographcity.FieldProvinceCode)
	}
	if m.FieldCleared(photographcity.FieldProvinceName) {
		fields = append(fields, photographcity.FieldProvinceName)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *PhotographCityMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *PhotographCityMutation) ClearField(name string) error {
	switch name {
	case photographcity.FieldProvinceCode:
		m.ClearProvinceCode()
		return nil
	case photographcity.FieldProvinceName:
		m.ClearProvinceName()
		return nil
	}
	return fmt.Errorf("unknown PhotographCity nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *PhotographCityMutation) ResetField(name string) error {
	switch name {
	case photographcity.FieldProvinceCode:
		m.ResetProvinceCode()
		return nil
	case photographcity.FieldProvinceName:
		m.ResetProvinceName()
		return nil
	case photographcity.FieldCityCode:
		m.ResetCityCode()
		return nil
	case photographcity.FieldCityName:
		m.ResetCityName()
		return nil
	}
	return fmt.Errorf("unknown PhotographCity field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *PhotographCityMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *PhotographCityMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *PhotographCityMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *PhotographCityMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *PhotographCityMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *PhotographCityMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *PhotographCityMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown PhotographCity unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *PhotographCityMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown PhotographCity edge %s", name)
}
