// Code generated by ent, DO NOT EDIT.

package entschema

import (
	"context"
	"example/be/gen/entschema/photographcity"
	"example/be/gen/entschema/predicate"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PhotographCityQuery is the builder for querying PhotographCity entities.
type PhotographCityQuery struct {
	config
	ctx        *QueryContext
	order      []photographcity.OrderOption
	inters     []Interceptor
	predicates []predicate.PhotographCity
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the PhotographCityQuery builder.
func (pcq *PhotographCityQuery) Where(ps ...predicate.PhotographCity) *PhotographCityQuery {
	pcq.predicates = append(pcq.predicates, ps...)
	return pcq
}

// Limit the number of records to be returned by this query.
func (pcq *PhotographCityQuery) Limit(limit int) *PhotographCityQuery {
	pcq.ctx.Limit = &limit
	return pcq
}

// Offset to start from.
func (pcq *PhotographCityQuery) Offset(offset int) *PhotographCityQuery {
	pcq.ctx.Offset = &offset
	return pcq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (pcq *PhotographCityQuery) Unique(unique bool) *PhotographCityQuery {
	pcq.ctx.Unique = &unique
	return pcq
}

// Order specifies how the records should be ordered.
func (pcq *PhotographCityQuery) Order(o ...photographcity.OrderOption) *PhotographCityQuery {
	pcq.order = append(pcq.order, o...)
	return pcq
}

// First returns the first PhotographCity entity from the query.
// Returns a *NotFoundError when no PhotographCity was found.
func (pcq *PhotographCityQuery) First(ctx context.Context) (*PhotographCity, error) {
	nodes, err := pcq.Limit(1).All(setContextOp(ctx, pcq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{photographcity.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (pcq *PhotographCityQuery) FirstX(ctx context.Context) *PhotographCity {
	node, err := pcq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first PhotographCity ID from the query.
// Returns a *NotFoundError when no PhotographCity ID was found.
func (pcq *PhotographCityQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = pcq.Limit(1).IDs(setContextOp(ctx, pcq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{photographcity.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (pcq *PhotographCityQuery) FirstIDX(ctx context.Context) int {
	id, err := pcq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single PhotographCity entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one PhotographCity entity is found.
// Returns a *NotFoundError when no PhotographCity entities are found.
func (pcq *PhotographCityQuery) Only(ctx context.Context) (*PhotographCity, error) {
	nodes, err := pcq.Limit(2).All(setContextOp(ctx, pcq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{photographcity.Label}
	default:
		return nil, &NotSingularError{photographcity.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (pcq *PhotographCityQuery) OnlyX(ctx context.Context) *PhotographCity {
	node, err := pcq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only PhotographCity ID in the query.
// Returns a *NotSingularError when more than one PhotographCity ID is found.
// Returns a *NotFoundError when no entities are found.
func (pcq *PhotographCityQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = pcq.Limit(2).IDs(setContextOp(ctx, pcq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{photographcity.Label}
	default:
		err = &NotSingularError{photographcity.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (pcq *PhotographCityQuery) OnlyIDX(ctx context.Context) int {
	id, err := pcq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of PhotographCities.
func (pcq *PhotographCityQuery) All(ctx context.Context) ([]*PhotographCity, error) {
	ctx = setContextOp(ctx, pcq.ctx, ent.OpQueryAll)
	if err := pcq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*PhotographCity, *PhotographCityQuery]()
	return withInterceptors[[]*PhotographCity](ctx, pcq, qr, pcq.inters)
}

// AllX is like All, but panics if an error occurs.
func (pcq *PhotographCityQuery) AllX(ctx context.Context) []*PhotographCity {
	nodes, err := pcq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of PhotographCity IDs.
func (pcq *PhotographCityQuery) IDs(ctx context.Context) (ids []int, err error) {
	if pcq.ctx.Unique == nil && pcq.path != nil {
		pcq.Unique(true)
	}
	ctx = setContextOp(ctx, pcq.ctx, ent.OpQueryIDs)
	if err = pcq.Select(photographcity.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (pcq *PhotographCityQuery) IDsX(ctx context.Context) []int {
	ids, err := pcq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (pcq *PhotographCityQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, pcq.ctx, ent.OpQueryCount)
	if err := pcq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, pcq, querierCount[*PhotographCityQuery](), pcq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (pcq *PhotographCityQuery) CountX(ctx context.Context) int {
	count, err := pcq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (pcq *PhotographCityQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, pcq.ctx, ent.OpQueryExist)
	switch _, err := pcq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("entschema: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (pcq *PhotographCityQuery) ExistX(ctx context.Context) bool {
	exist, err := pcq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the PhotographCityQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (pcq *PhotographCityQuery) Clone() *PhotographCityQuery {
	if pcq == nil {
		return nil
	}
	return &PhotographCityQuery{
		config:     pcq.config,
		ctx:        pcq.ctx.Clone(),
		order:      append([]photographcity.OrderOption{}, pcq.order...),
		inters:     append([]Interceptor{}, pcq.inters...),
		predicates: append([]predicate.PhotographCity{}, pcq.predicates...),
		// clone intermediate query.
		sql:  pcq.sql.Clone(),
		path: pcq.path,
	}
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		ProvinceCode string `json:"province_code,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.PhotographCity.Query().
//		GroupBy(photographcity.FieldProvinceCode).
//		Aggregate(entschema.Count()).
//		Scan(ctx, &v)
func (pcq *PhotographCityQuery) GroupBy(field string, fields ...string) *PhotographCityGroupBy {
	pcq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &PhotographCityGroupBy{build: pcq}
	grbuild.flds = &pcq.ctx.Fields
	grbuild.label = photographcity.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		ProvinceCode string `json:"province_code,omitempty"`
//	}
//
//	client.PhotographCity.Query().
//		Select(photographcity.FieldProvinceCode).
//		Scan(ctx, &v)
func (pcq *PhotographCityQuery) Select(fields ...string) *PhotographCitySelect {
	pcq.ctx.Fields = append(pcq.ctx.Fields, fields...)
	sbuild := &PhotographCitySelect{PhotographCityQuery: pcq}
	sbuild.label = photographcity.Label
	sbuild.flds, sbuild.scan = &pcq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a PhotographCitySelect configured with the given aggregations.
func (pcq *PhotographCityQuery) Aggregate(fns ...AggregateFunc) *PhotographCitySelect {
	return pcq.Select().Aggregate(fns...)
}

func (pcq *PhotographCityQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range pcq.inters {
		if inter == nil {
			return fmt.Errorf("entschema: uninitialized interceptor (forgotten import entschema/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, pcq); err != nil {
				return err
			}
		}
	}
	for _, f := range pcq.ctx.Fields {
		if !photographcity.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("entschema: invalid field %q for query", f)}
		}
	}
	if pcq.path != nil {
		prev, err := pcq.path(ctx)
		if err != nil {
			return err
		}
		pcq.sql = prev
	}
	return nil
}

func (pcq *PhotographCityQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*PhotographCity, error) {
	var (
		nodes = []*PhotographCity{}
		_spec = pcq.querySpec()
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*PhotographCity).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &PhotographCity{config: pcq.config}
		nodes = append(nodes, node)
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, pcq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	return nodes, nil
}

func (pcq *PhotographCityQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := pcq.querySpec()
	_spec.Node.Columns = pcq.ctx.Fields
	if len(pcq.ctx.Fields) > 0 {
		_spec.Unique = pcq.ctx.Unique != nil && *pcq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, pcq.driver, _spec)
}

func (pcq *PhotographCityQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(photographcity.Table, photographcity.Columns, sqlgraph.NewFieldSpec(photographcity.FieldID, field.TypeInt))
	_spec.From = pcq.sql
	if unique := pcq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if pcq.path != nil {
		_spec.Unique = true
	}
	if fields := pcq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, photographcity.FieldID)
		for i := range fields {
			if fields[i] != photographcity.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := pcq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := pcq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := pcq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := pcq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (pcq *PhotographCityQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(pcq.driver.Dialect())
	t1 := builder.Table(photographcity.Table)
	columns := pcq.ctx.Fields
	if len(columns) == 0 {
		columns = photographcity.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if pcq.sql != nil {
		selector = pcq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if pcq.ctx.Unique != nil && *pcq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range pcq.predicates {
		p(selector)
	}
	for _, p := range pcq.order {
		p(selector)
	}
	if offset := pcq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := pcq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// PhotographCityGroupBy is the group-by builder for PhotographCity entities.
type PhotographCityGroupBy struct {
	selector
	build *PhotographCityQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (pcgb *PhotographCityGroupBy) Aggregate(fns ...AggregateFunc) *PhotographCityGroupBy {
	pcgb.fns = append(pcgb.fns, fns...)
	return pcgb
}

// Scan applies the selector query and scans the result into the given value.
func (pcgb *PhotographCityGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, pcgb.build.ctx, ent.OpQueryGroupBy)
	if err := pcgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*PhotographCityQuery, *PhotographCityGroupBy](ctx, pcgb.build, pcgb, pcgb.build.inters, v)
}

func (pcgb *PhotographCityGroupBy) sqlScan(ctx context.Context, root *PhotographCityQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(pcgb.fns))
	for _, fn := range pcgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*pcgb.flds)+len(pcgb.fns))
		for _, f := range *pcgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*pcgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := pcgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// PhotographCitySelect is the builder for selecting fields of PhotographCity entities.
type PhotographCitySelect struct {
	*PhotographCityQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (pcs *PhotographCitySelect) Aggregate(fns ...AggregateFunc) *PhotographCitySelect {
	pcs.fns = append(pcs.fns, fns...)
	return pcs
}

// Scan applies the selector query and scans the result into the given value.
func (pcs *PhotographCitySelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, pcs.ctx, ent.OpQuerySelect)
	if err := pcs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*PhotographCityQuery, *PhotographCitySelect](ctx, pcs.PhotographCityQuery, pcs, pcs.inters, v)
}

func (pcs *PhotographCitySelect) sqlScan(ctx context.Context, root *PhotographCityQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(pcs.fns))
	for _, fn := range pcs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*pcs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := pcs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
