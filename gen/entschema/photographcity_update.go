// Code generated by ent, DO NOT EDIT.

package entschema

import (
	"context"
	"errors"
	"example/be/gen/entschema/photographcity"
	"example/be/gen/entschema/predicate"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PhotographCityUpdate is the builder for updating PhotographCity entities.
type PhotographCityUpdate struct {
	config
	hooks    []Hook
	mutation *PhotographCityMutation
}

// Where appends a list predicates to the PhotographCityUpdate builder.
func (pcu *PhotographCityUpdate) Where(ps ...predicate.PhotographCity) *PhotographCityUpdate {
	pcu.mutation.Where(ps...)
	return pcu
}

// SetProvinceCode sets the "province_code" field.
func (pcu *PhotographCityUpdate) SetProvinceCode(s string) *PhotographCityUpdate {
	pcu.mutation.SetProvinceCode(s)
	return pcu
}

// SetNillableProvinceCode sets the "province_code" field if the given value is not nil.
func (pcu *PhotographCityUpdate) SetNillableProvinceCode(s *string) *PhotographCityUpdate {
	if s != nil {
		pcu.SetProvinceCode(*s)
	}
	return pcu
}

// ClearProvinceCode clears the value of the "province_code" field.
func (pcu *PhotographCityUpdate) ClearProvinceCode() *PhotographCityUpdate {
	pcu.mutation.ClearProvinceCode()
	return pcu
}

// SetProvinceName sets the "province_name" field.
func (pcu *PhotographCityUpdate) SetProvinceName(s string) *PhotographCityUpdate {
	pcu.mutation.SetProvinceName(s)
	return pcu
}

// SetNillableProvinceName sets the "province_name" field if the given value is not nil.
func (pcu *PhotographCityUpdate) SetNillableProvinceName(s *string) *PhotographCityUpdate {
	if s != nil {
		pcu.SetProvinceName(*s)
	}
	return pcu
}

// ClearProvinceName clears the value of the "province_name" field.
func (pcu *PhotographCityUpdate) ClearProvinceName() *PhotographCityUpdate {
	pcu.mutation.ClearProvinceName()
	return pcu
}

// SetCityCode sets the "city_code" field.
func (pcu *PhotographCityUpdate) SetCityCode(s string) *PhotographCityUpdate {
	pcu.mutation.SetCityCode(s)
	return pcu
}

// SetNillableCityCode sets the "city_code" field if the given value is not nil.
func (pcu *PhotographCityUpdate) SetNillableCityCode(s *string) *PhotographCityUpdate {
	if s != nil {
		pcu.SetCityCode(*s)
	}
	return pcu
}

// SetCityName sets the "city_name" field.
func (pcu *PhotographCityUpdate) SetCityName(s string) *PhotographCityUpdate {
	pcu.mutation.SetCityName(s)
	return pcu
}

// SetNillableCityName sets the "city_name" field if the given value is not nil.
func (pcu *PhotographCityUpdate) SetNillableCityName(s *string) *PhotographCityUpdate {
	if s != nil {
		pcu.SetCityName(*s)
	}
	return pcu
}

// Mutation returns the PhotographCityMutation object of the builder.
func (pcu *PhotographCityUpdate) Mutation() *PhotographCityMutation {
	return pcu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pcu *PhotographCityUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, pcu.sqlSave, pcu.mutation, pcu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pcu *PhotographCityUpdate) SaveX(ctx context.Context) int {
	affected, err := pcu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pcu *PhotographCityUpdate) Exec(ctx context.Context) error {
	_, err := pcu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcu *PhotographCityUpdate) ExecX(ctx context.Context) {
	if err := pcu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (pcu *PhotographCityUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(photographcity.Table, photographcity.Columns, sqlgraph.NewFieldSpec(photographcity.FieldID, field.TypeInt))
	if ps := pcu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pcu.mutation.ProvinceCode(); ok {
		_spec.SetField(photographcity.FieldProvinceCode, field.TypeString, value)
	}
	if pcu.mutation.ProvinceCodeCleared() {
		_spec.ClearField(photographcity.FieldProvinceCode, field.TypeString)
	}
	if value, ok := pcu.mutation.ProvinceName(); ok {
		_spec.SetField(photographcity.FieldProvinceName, field.TypeString, value)
	}
	if pcu.mutation.ProvinceNameCleared() {
		_spec.ClearField(photographcity.FieldProvinceName, field.TypeString)
	}
	if value, ok := pcu.mutation.CityCode(); ok {
		_spec.SetField(photographcity.FieldCityCode, field.TypeString, value)
	}
	if value, ok := pcu.mutation.CityName(); ok {
		_spec.SetField(photographcity.FieldCityName, field.TypeString, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pcu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{photographcity.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pcu.mutation.done = true
	return n, nil
}

// PhotographCityUpdateOne is the builder for updating a single PhotographCity entity.
type PhotographCityUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PhotographCityMutation
}

// SetProvinceCode sets the "province_code" field.
func (pcuo *PhotographCityUpdateOne) SetProvinceCode(s string) *PhotographCityUpdateOne {
	pcuo.mutation.SetProvinceCode(s)
	return pcuo
}

// SetNillableProvinceCode sets the "province_code" field if the given value is not nil.
func (pcuo *PhotographCityUpdateOne) SetNillableProvinceCode(s *string) *PhotographCityUpdateOne {
	if s != nil {
		pcuo.SetProvinceCode(*s)
	}
	return pcuo
}

// ClearProvinceCode clears the value of the "province_code" field.
func (pcuo *PhotographCityUpdateOne) ClearProvinceCode() *PhotographCityUpdateOne {
	pcuo.mutation.ClearProvinceCode()
	return pcuo
}

// SetProvinceName sets the "province_name" field.
func (pcuo *PhotographCityUpdateOne) SetProvinceName(s string) *PhotographCityUpdateOne {
	pcuo.mutation.SetProvinceName(s)
	return pcuo
}

// SetNillableProvinceName sets the "province_name" field if the given value is not nil.
func (pcuo *PhotographCityUpdateOne) SetNillableProvinceName(s *string) *PhotographCityUpdateOne {
	if s != nil {
		pcuo.SetProvinceName(*s)
	}
	return pcuo
}

// ClearProvinceName clears the value of the "province_name" field.
func (pcuo *PhotographCityUpdateOne) ClearProvinceName() *PhotographCityUpdateOne {
	pcuo.mutation.ClearProvinceName()
	return pcuo
}

// SetCityCode sets the "city_code" field.
func (pcuo *PhotographCityUpdateOne) SetCityCode(s string) *PhotographCityUpdateOne {
	pcuo.mutation.SetCityCode(s)
	return pcuo
}

// SetNillableCityCode sets the "city_code" field if the given value is not nil.
func (pcuo *PhotographCityUpdateOne) SetNillableCityCode(s *string) *PhotographCityUpdateOne {
	if s != nil {
		pcuo.SetCityCode(*s)
	}
	return pcuo
}

// SetCityName sets the "city_name" field.
func (pcuo *PhotographCityUpdateOne) SetCityName(s string) *PhotographCityUpdateOne {
	pcuo.mutation.SetCityName(s)
	return pcuo
}

// SetNillableCityName sets the "city_name" field if the given value is not nil.
func (pcuo *PhotographCityUpdateOne) SetNillableCityName(s *string) *PhotographCityUpdateOne {
	if s != nil {
		pcuo.SetCityName(*s)
	}
	return pcuo
}

// Mutation returns the PhotographCityMutation object of the builder.
func (pcuo *PhotographCityUpdateOne) Mutation() *PhotographCityMutation {
	return pcuo.mutation
}

// Where appends a list predicates to the PhotographCityUpdate builder.
func (pcuo *PhotographCityUpdateOne) Where(ps ...predicate.PhotographCity) *PhotographCityUpdateOne {
	pcuo.mutation.Where(ps...)
	return pcuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (pcuo *PhotographCityUpdateOne) Select(field string, fields ...string) *PhotographCityUpdateOne {
	pcuo.fields = append([]string{field}, fields...)
	return pcuo
}

// Save executes the query and returns the updated PhotographCity entity.
func (pcuo *PhotographCityUpdateOne) Save(ctx context.Context) (*PhotographCity, error) {
	return withHooks(ctx, pcuo.sqlSave, pcuo.mutation, pcuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pcuo *PhotographCityUpdateOne) SaveX(ctx context.Context) *PhotographCity {
	node, err := pcuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (pcuo *PhotographCityUpdateOne) Exec(ctx context.Context) error {
	_, err := pcuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcuo *PhotographCityUpdateOne) ExecX(ctx context.Context) {
	if err := pcuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (pcuo *PhotographCityUpdateOne) sqlSave(ctx context.Context) (_node *PhotographCity, err error) {
	_spec := sqlgraph.NewUpdateSpec(photographcity.Table, photographcity.Columns, sqlgraph.NewFieldSpec(photographcity.FieldID, field.TypeInt))
	id, ok := pcuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`entschema: missing "PhotographCity.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := pcuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, photographcity.FieldID)
		for _, f := range fields {
			if !photographcity.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("entschema: invalid field %q for query", f)}
			}
			if f != photographcity.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := pcuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pcuo.mutation.ProvinceCode(); ok {
		_spec.SetField(photographcity.FieldProvinceCode, field.TypeString, value)
	}
	if pcuo.mutation.ProvinceCodeCleared() {
		_spec.ClearField(photographcity.FieldProvinceCode, field.TypeString)
	}
	if value, ok := pcuo.mutation.ProvinceName(); ok {
		_spec.SetField(photographcity.FieldProvinceName, field.TypeString, value)
	}
	if pcuo.mutation.ProvinceNameCleared() {
		_spec.ClearField(photographcity.FieldProvinceName, field.TypeString)
	}
	if value, ok := pcuo.mutation.CityCode(); ok {
		_spec.SetField(photographcity.FieldCityCode, field.TypeString, value)
	}
	if value, ok := pcuo.mutation.CityName(); ok {
		_spec.SetField(photographcity.FieldCityName, field.TypeString, value)
	}
	_node = &PhotographCity{config: pcuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, pcuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{photographcity.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	pcuo.mutation.done = true
	return _node, nil
}
