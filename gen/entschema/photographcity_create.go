// Code generated by ent, DO NOT EDIT.

package entschema

import (
	"context"
	"errors"
	"example/be/gen/entschema/photographcity"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PhotographCityCreate is the builder for creating a PhotographCity entity.
type PhotographCityCreate struct {
	config
	mutation *PhotographCityMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetProvinceCode sets the "province_code" field.
func (pcc *PhotographCityCreate) SetProvinceCode(s string) *PhotographCityCreate {
	pcc.mutation.SetProvinceCode(s)
	return pcc
}

// SetNillableProvinceCode sets the "province_code" field if the given value is not nil.
func (pcc *PhotographCityCreate) SetNillableProvinceCode(s *string) *PhotographCityCreate {
	if s != nil {
		pcc.SetProvinceCode(*s)
	}
	return pcc
}

// SetProvinceName sets the "province_name" field.
func (pcc *PhotographCityCreate) SetProvinceName(s string) *PhotographCityCreate {
	pcc.mutation.SetProvinceName(s)
	return pcc
}

// SetNillableProvinceName sets the "province_name" field if the given value is not nil.
func (pcc *PhotographCityCreate) SetNillableProvinceName(s *string) *PhotographCityCreate {
	if s != nil {
		pcc.SetProvinceName(*s)
	}
	return pcc
}

// SetCityCode sets the "city_code" field.
func (pcc *PhotographCityCreate) SetCityCode(s string) *PhotographCityCreate {
	pcc.mutation.SetCityCode(s)
	return pcc
}

// SetCityName sets the "city_name" field.
func (pcc *PhotographCityCreate) SetCityName(s string) *PhotographCityCreate {
	pcc.mutation.SetCityName(s)
	return pcc
}

// Mutation returns the PhotographCityMutation object of the builder.
func (pcc *PhotographCityCreate) Mutation() *PhotographCityMutation {
	return pcc.mutation
}

// Save creates the PhotographCity in the database.
func (pcc *PhotographCityCreate) Save(ctx context.Context) (*PhotographCity, error) {
	return withHooks(ctx, pcc.sqlSave, pcc.mutation, pcc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pcc *PhotographCityCreate) SaveX(ctx context.Context) *PhotographCity {
	v, err := pcc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pcc *PhotographCityCreate) Exec(ctx context.Context) error {
	_, err := pcc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcc *PhotographCityCreate) ExecX(ctx context.Context) {
	if err := pcc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pcc *PhotographCityCreate) check() error {
	if _, ok := pcc.mutation.CityCode(); !ok {
		return &ValidationError{Name: "city_code", err: errors.New(`entschema: missing required field "PhotographCity.city_code"`)}
	}
	if _, ok := pcc.mutation.CityName(); !ok {
		return &ValidationError{Name: "city_name", err: errors.New(`entschema: missing required field "PhotographCity.city_name"`)}
	}
	return nil
}

func (pcc *PhotographCityCreate) sqlSave(ctx context.Context) (*PhotographCity, error) {
	if err := pcc.check(); err != nil {
		return nil, err
	}
	_node, _spec := pcc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pcc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	pcc.mutation.id = &_node.ID
	pcc.mutation.done = true
	return _node, nil
}

func (pcc *PhotographCityCreate) createSpec() (*PhotographCity, *sqlgraph.CreateSpec) {
	var (
		_node = &PhotographCity{config: pcc.config}
		_spec = sqlgraph.NewCreateSpec(photographcity.Table, sqlgraph.NewFieldSpec(photographcity.FieldID, field.TypeInt))
	)
	_spec.OnConflict = pcc.conflict
	if value, ok := pcc.mutation.ProvinceCode(); ok {
		_spec.SetField(photographcity.FieldProvinceCode, field.TypeString, value)
		_node.ProvinceCode = &value
	}
	if value, ok := pcc.mutation.ProvinceName(); ok {
		_spec.SetField(photographcity.FieldProvinceName, field.TypeString, value)
		_node.ProvinceName = &value
	}
	if value, ok := pcc.mutation.CityCode(); ok {
		_spec.SetField(photographcity.FieldCityCode, field.TypeString, value)
		_node.CityCode = value
	}
	if value, ok := pcc.mutation.CityName(); ok {
		_spec.SetField(photographcity.FieldCityName, field.TypeString, value)
		_node.CityName = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.PhotographCity.Create().
//		SetProvinceCode(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PhotographCityUpsert) {
//			SetProvinceCode(v+v).
//		}).
//		Exec(ctx)
func (pcc *PhotographCityCreate) OnConflict(opts ...sql.ConflictOption) *PhotographCityUpsertOne {
	pcc.conflict = opts
	return &PhotographCityUpsertOne{
		create: pcc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.PhotographCity.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (pcc *PhotographCityCreate) OnConflictColumns(columns ...string) *PhotographCityUpsertOne {
	pcc.conflict = append(pcc.conflict, sql.ConflictColumns(columns...))
	return &PhotographCityUpsertOne{
		create: pcc,
	}
}

type (
	// PhotographCityUpsertOne is the builder for "upsert"-ing
	//  one PhotographCity node.
	PhotographCityUpsertOne struct {
		create *PhotographCityCreate
	}

	// PhotographCityUpsert is the "OnConflict" setter.
	PhotographCityUpsert struct {
		*sql.UpdateSet
	}
)

// SetProvinceCode sets the "province_code" field.
func (u *PhotographCityUpsert) SetProvinceCode(v string) *PhotographCityUpsert {
	u.Set(photographcity.FieldProvinceCode, v)
	return u
}

// UpdateProvinceCode sets the "province_code" field to the value that was provided on create.
func (u *PhotographCityUpsert) UpdateProvinceCode() *PhotographCityUpsert {
	u.SetExcluded(photographcity.FieldProvinceCode)
	return u
}

// ClearProvinceCode clears the value of the "province_code" field.
func (u *PhotographCityUpsert) ClearProvinceCode() *PhotographCityUpsert {
	u.SetNull(photographcity.FieldProvinceCode)
	return u
}

// SetProvinceName sets the "province_name" field.
func (u *PhotographCityUpsert) SetProvinceName(v string) *PhotographCityUpsert {
	u.Set(photographcity.FieldProvinceName, v)
	return u
}

// UpdateProvinceName sets the "province_name" field to the value that was provided on create.
func (u *PhotographCityUpsert) UpdateProvinceName() *PhotographCityUpsert {
	u.SetExcluded(photographcity.FieldProvinceName)
	return u
}

// ClearProvinceName clears the value of the "province_name" field.
func (u *PhotographCityUpsert) ClearProvinceName() *PhotographCityUpsert {
	u.SetNull(photographcity.FieldProvinceName)
	return u
}

// SetCityCode sets the "city_code" field.
func (u *PhotographCityUpsert) SetCityCode(v string) *PhotographCityUpsert {
	u.Set(photographcity.FieldCityCode, v)
	return u
}

// UpdateCityCode sets the "city_code" field to the value that was provided on create.
func (u *PhotographCityUpsert) UpdateCityCode() *PhotographCityUpsert {
	u.SetExcluded(photographcity.FieldCityCode)
	return u
}

// SetCityName sets the "city_name" field.
func (u *PhotographCityUpsert) SetCityName(v string) *PhotographCityUpsert {
	u.Set(photographcity.FieldCityName, v)
	return u
}

// UpdateCityName sets the "city_name" field to the value that was provided on create.
func (u *PhotographCityUpsert) UpdateCityName() *PhotographCityUpsert {
	u.SetExcluded(photographcity.FieldCityName)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.PhotographCity.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *PhotographCityUpsertOne) UpdateNewValues() *PhotographCityUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.PhotographCity.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *PhotographCityUpsertOne) Ignore() *PhotographCityUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PhotographCityUpsertOne) DoNothing() *PhotographCityUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PhotographCityCreate.OnConflict
// documentation for more info.
func (u *PhotographCityUpsertOne) Update(set func(*PhotographCityUpsert)) *PhotographCityUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PhotographCityUpsert{UpdateSet: update})
	}))
	return u
}

// SetProvinceCode sets the "province_code" field.
func (u *PhotographCityUpsertOne) SetProvinceCode(v string) *PhotographCityUpsertOne {
	return u.Update(func(s *PhotographCityUpsert) {
		s.SetProvinceCode(v)
	})
}

// UpdateProvinceCode sets the "province_code" field to the value that was provided on create.
func (u *PhotographCityUpsertOne) UpdateProvinceCode() *PhotographCityUpsertOne {
	return u.Update(func(s *PhotographCityUpsert) {
		s.UpdateProvinceCode()
	})
}

// ClearProvinceCode clears the value of the "province_code" field.
func (u *PhotographCityUpsertOne) ClearProvinceCode() *PhotographCityUpsertOne {
	return u.Update(func(s *PhotographCityUpsert) {
		s.ClearProvinceCode()
	})
}

// SetProvinceName sets the "province_name" field.
func (u *PhotographCityUpsertOne) SetProvinceName(v string) *PhotographCityUpsertOne {
	return u.Update(func(s *PhotographCityUpsert) {
		s.SetProvinceName(v)
	})
}

// UpdateProvinceName sets the "province_name" field to the value that was provided on create.
func (u *PhotographCityUpsertOne) UpdateProvinceName() *PhotographCityUpsertOne {
	return u.Update(func(s *PhotographCityUpsert) {
		s.UpdateProvinceName()
	})
}

// ClearProvinceName clears the value of the "province_name" field.
func (u *PhotographCityUpsertOne) ClearProvinceName() *PhotographCityUpsertOne {
	return u.Update(func(s *PhotographCityUpsert) {
		s.ClearProvinceName()
	})
}

// SetCityCode sets the "city_code" field.
func (u *PhotographCityUpsertOne) SetCityCode(v string) *PhotographCityUpsertOne {
	return u.Update(func(s *PhotographCityUpsert) {
		s.SetCityCode(v)
	})
}

// UpdateCityCode sets the "city_code" field to the value that was provided on create.
func (u *PhotographCityUpsertOne) UpdateCityCode() *PhotographCityUpsertOne {
	return u.Update(func(s *PhotographCityUpsert) {
		s.UpdateCityCode()
	})
}

// SetCityName sets the "city_name" field.
func (u *PhotographCityUpsertOne) SetCityName(v string) *PhotographCityUpsertOne {
	return u.Update(func(s *PhotographCityUpsert) {
		s.SetCityName(v)
	})
}

// UpdateCityName sets the "city_name" field to the value that was provided on create.
func (u *PhotographCityUpsertOne) UpdateCityName() *PhotographCityUpsertOne {
	return u.Update(func(s *PhotographCityUpsert) {
		s.UpdateCityName()
	})
}

// Exec executes the query.
func (u *PhotographCityUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("entschema: missing options for PhotographCityCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PhotographCityUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *PhotographCityUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *PhotographCityUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// PhotographCityCreateBulk is the builder for creating many PhotographCity entities in bulk.
type PhotographCityCreateBulk struct {
	config
	err      error
	builders []*PhotographCityCreate
	conflict []sql.ConflictOption
}

// Save creates the PhotographCity entities in the database.
func (pccb *PhotographCityCreateBulk) Save(ctx context.Context) ([]*PhotographCity, error) {
	if pccb.err != nil {
		return nil, pccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(pccb.builders))
	nodes := make([]*PhotographCity, len(pccb.builders))
	mutators := make([]Mutator, len(pccb.builders))
	for i := range pccb.builders {
		func(i int, root context.Context) {
			builder := pccb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PhotographCityMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = pccb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pccb *PhotographCityCreateBulk) SaveX(ctx context.Context) []*PhotographCity {
	v, err := pccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pccb *PhotographCityCreateBulk) Exec(ctx context.Context) error {
	_, err := pccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pccb *PhotographCityCreateBulk) ExecX(ctx context.Context) {
	if err := pccb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.PhotographCity.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PhotographCityUpsert) {
//			SetProvinceCode(v+v).
//		}).
//		Exec(ctx)
func (pccb *PhotographCityCreateBulk) OnConflict(opts ...sql.ConflictOption) *PhotographCityUpsertBulk {
	pccb.conflict = opts
	return &PhotographCityUpsertBulk{
		create: pccb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.PhotographCity.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (pccb *PhotographCityCreateBulk) OnConflictColumns(columns ...string) *PhotographCityUpsertBulk {
	pccb.conflict = append(pccb.conflict, sql.ConflictColumns(columns...))
	return &PhotographCityUpsertBulk{
		create: pccb,
	}
}

// PhotographCityUpsertBulk is the builder for "upsert"-ing
// a bulk of PhotographCity nodes.
type PhotographCityUpsertBulk struct {
	create *PhotographCityCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.PhotographCity.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *PhotographCityUpsertBulk) UpdateNewValues() *PhotographCityUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.PhotographCity.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *PhotographCityUpsertBulk) Ignore() *PhotographCityUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PhotographCityUpsertBulk) DoNothing() *PhotographCityUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PhotographCityCreateBulk.OnConflict
// documentation for more info.
func (u *PhotographCityUpsertBulk) Update(set func(*PhotographCityUpsert)) *PhotographCityUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PhotographCityUpsert{UpdateSet: update})
	}))
	return u
}

// SetProvinceCode sets the "province_code" field.
func (u *PhotographCityUpsertBulk) SetProvinceCode(v string) *PhotographCityUpsertBulk {
	return u.Update(func(s *PhotographCityUpsert) {
		s.SetProvinceCode(v)
	})
}

// UpdateProvinceCode sets the "province_code" field to the value that was provided on create.
func (u *PhotographCityUpsertBulk) UpdateProvinceCode() *PhotographCityUpsertBulk {
	return u.Update(func(s *PhotographCityUpsert) {
		s.UpdateProvinceCode()
	})
}

// ClearProvinceCode clears the value of the "province_code" field.
func (u *PhotographCityUpsertBulk) ClearProvinceCode() *PhotographCityUpsertBulk {
	return u.Update(func(s *PhotographCityUpsert) {
		s.ClearProvinceCode()
	})
}

// SetProvinceName sets the "province_name" field.
func (u *PhotographCityUpsertBulk) SetProvinceName(v string) *PhotographCityUpsertBulk {
	return u.Update(func(s *PhotographCityUpsert) {
		s.SetProvinceName(v)
	})
}

// UpdateProvinceName sets the "province_name" field to the value that was provided on create.
func (u *PhotographCityUpsertBulk) UpdateProvinceName() *PhotographCityUpsertBulk {
	return u.Update(func(s *PhotographCityUpsert) {
		s.UpdateProvinceName()
	})
}

// ClearProvinceName clears the value of the "province_name" field.
func (u *PhotographCityUpsertBulk) ClearProvinceName() *PhotographCityUpsertBulk {
	return u.Update(func(s *PhotographCityUpsert) {
		s.ClearProvinceName()
	})
}

// SetCityCode sets the "city_code" field.
func (u *PhotographCityUpsertBulk) SetCityCode(v string) *PhotographCityUpsertBulk {
	return u.Update(func(s *PhotographCityUpsert) {
		s.SetCityCode(v)
	})
}

// UpdateCityCode sets the "city_code" field to the value that was provided on create.
func (u *PhotographCityUpsertBulk) UpdateCityCode() *PhotographCityUpsertBulk {
	return u.Update(func(s *PhotographCityUpsert) {
		s.UpdateCityCode()
	})
}

// SetCityName sets the "city_name" field.
func (u *PhotographCityUpsertBulk) SetCityName(v string) *PhotographCityUpsertBulk {
	return u.Update(func(s *PhotographCityUpsert) {
		s.SetCityName(v)
	})
}

// UpdateCityName sets the "city_name" field to the value that was provided on create.
func (u *PhotographCityUpsertBulk) UpdateCityName() *PhotographCityUpsertBulk {
	return u.Update(func(s *PhotographCityUpsert) {
		s.UpdateCityName()
	})
}

// Exec executes the query.
func (u *PhotographCityUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("entschema: OnConflict was set for builder %d. Set it on the PhotographCityCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("entschema: missing options for PhotographCityCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PhotographCityUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
