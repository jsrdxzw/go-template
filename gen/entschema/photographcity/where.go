// Code generated by ent, DO NOT EDIT.

package photographcity

import (
	"example/be/gen/entschema/predicate"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.PhotographCity {
	return predicate.PhotographCity(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.PhotographCity {
	return predicate.PhotographCity(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.PhotographCity {
	return predicate.PhotographCity(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.PhotographCity {
	return predicate.PhotographCity(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.PhotographCity {
	return predicate.PhotographCity(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.PhotographCity {
	return predicate.PhotographCity(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.PhotographCity {
	return predicate.PhotographCity(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.PhotographCity {
	return predicate.PhotographCity(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.PhotographCity {
	return predicate.PhotographCity(sql.FieldLTE(FieldID, id))
}

// ProvinceCode applies equality check predicate on the "province_code" field. It's identical to ProvinceCodeEQ.
func ProvinceCode(v string) predicate.PhotographCity {
	return predicate.PhotographCity(sql.FieldEQ(FieldProvinceCode, v))
}

// ProvinceName applies equality check predicate on the "province_name" field. It's identical to ProvinceNameEQ.
func ProvinceName(v string) predicate.PhotographCity {
	return predicate.PhotographCity(sql.FieldEQ(FieldProvinceName, v))
}

// CityCode applies equality check predicate on the "city_code" field. It's identical to CityCodeEQ.
func CityCode(v string) predicate.PhotographCity {
	return predicate.PhotographCity(sql.FieldEQ(FieldCityCode, v))
}

// CityName applies equality check predicate on the "city_name" field. It's identical to CityNameEQ.
func CityName(v string) predicate.PhotographCity {
	return predicate.PhotographCity(sql.FieldEQ(FieldCityName, v))
}

// ProvinceCodeEQ applies the EQ predicate on the "province_code" field.
func ProvinceCodeEQ(v string) predicate.PhotographCity {
	return predicate.PhotographCity(sql.FieldEQ(FieldProvinceCode, v))
}

// ProvinceCodeNEQ applies the NEQ predicate on the "province_code" field.
func ProvinceCodeNEQ(v string) predicate.PhotographCity {
	return predicate.PhotographCity(sql.FieldNEQ(FieldProvinceCode, v))
}

// ProvinceCodeIn applies the In predicate on the "province_code" field.
func ProvinceCodeIn(vs ...string) predicate.PhotographCity {
	return predicate.PhotographCity(sql.FieldIn(FieldProvinceCode, vs...))
}

// ProvinceCodeNotIn applies the NotIn predicate on the "province_code" field.
func ProvinceCodeNotIn(vs ...string) predicate.PhotographCity {
	return predicate.PhotographCity(sql.FieldNotIn(FieldProvinceCode, vs...))
}

// ProvinceCodeGT applies the GT predicate on the "province_code" field.
func ProvinceCodeGT(v string) predicate.PhotographCity {
	return predicate.PhotographCity(sql.FieldGT(FieldProvinceCode, v))
}

// ProvinceCodeGTE applies the GTE predicate on the "province_code" field.
func ProvinceCodeGTE(v string) predicate.PhotographCity {
	return predicate.PhotographCity(sql.FieldGTE(FieldProvinceCode, v))
}

// ProvinceCodeLT applies the LT predicate on the "province_code" field.
func ProvinceCodeLT(v string) predicate.PhotographCity {
	return predicate.PhotographCity(sql.FieldLT(FieldProvinceCode, v))
}

// ProvinceCodeLTE applies the LTE predicate on the "province_code" field.
func ProvinceCodeLTE(v string) predicate.PhotographCity {
	return predicate.PhotographCity(sql.FieldLTE(FieldProvinceCode, v))
}

// ProvinceCodeContains applies the Contains predicate on the "province_code" field.
func ProvinceCodeContains(v string) predicate.PhotographCity {
	return predicate.PhotographCity(sql.FieldContains(FieldProvinceCode, v))
}

// ProvinceCodeHasPrefix applies the HasPrefix predicate on the "province_code" field.
func ProvinceCodeHasPrefix(v string) predicate.PhotographCity {
	return predicate.PhotographCity(sql.FieldHasPrefix(FieldProvinceCode, v))
}

// ProvinceCodeHasSuffix applies the HasSuffix predicate on the "province_code" field.
func ProvinceCodeHasSuffix(v string) predicate.PhotographCity {
	return predicate.PhotographCity(sql.FieldHasSuffix(FieldProvinceCode, v))
}

// ProvinceCodeIsNil applies the IsNil predicate on the "province_code" field.
func ProvinceCodeIsNil() predicate.PhotographCity {
	return predicate.PhotographCity(sql.FieldIsNull(FieldProvinceCode))
}

// ProvinceCodeNotNil applies the NotNil predicate on the "province_code" field.
func ProvinceCodeNotNil() predicate.PhotographCity {
	return predicate.PhotographCity(sql.FieldNotNull(FieldProvinceCode))
}

// ProvinceCodeEqualFold applies the EqualFold predicate on the "province_code" field.
func ProvinceCodeEqualFold(v string) predicate.PhotographCity {
	return predicate.PhotographCity(sql.FieldEqualFold(FieldProvinceCode, v))
}

// ProvinceCodeContainsFold applies the ContainsFold predicate on the "province_code" field.
func ProvinceCodeContainsFold(v string) predicate.PhotographCity {
	return predicate.PhotographCity(sql.FieldContainsFold(FieldProvinceCode, v))
}

// ProvinceNameEQ applies the EQ predicate on the "province_name" field.
func ProvinceNameEQ(v string) predicate.PhotographCity {
	return predicate.PhotographCity(sql.FieldEQ(FieldProvinceName, v))
}

// ProvinceNameNEQ applies the NEQ predicate on the "province_name" field.
func ProvinceNameNEQ(v string) predicate.PhotographCity {
	return predicate.PhotographCity(sql.FieldNEQ(FieldProvinceName, v))
}

// ProvinceNameIn applies the In predicate on the "province_name" field.
func ProvinceNameIn(vs ...string) predicate.PhotographCity {
	return predicate.PhotographCity(sql.FieldIn(FieldProvinceName, vs...))
}

// ProvinceNameNotIn applies the NotIn predicate on the "province_name" field.
func ProvinceNameNotIn(vs ...string) predicate.PhotographCity {
	return predicate.PhotographCity(sql.FieldNotIn(FieldProvinceName, vs...))
}

// ProvinceNameGT applies the GT predicate on the "province_name" field.
func ProvinceNameGT(v string) predicate.PhotographCity {
	return predicate.PhotographCity(sql.FieldGT(FieldProvinceName, v))
}

// ProvinceNameGTE applies the GTE predicate on the "province_name" field.
func ProvinceNameGTE(v string) predicate.PhotographCity {
	return predicate.PhotographCity(sql.FieldGTE(FieldProvinceName, v))
}

// ProvinceNameLT applies the LT predicate on the "province_name" field.
func ProvinceNameLT(v string) predicate.PhotographCity {
	return predicate.PhotographCity(sql.FieldLT(FieldProvinceName, v))
}

// ProvinceNameLTE applies the LTE predicate on the "province_name" field.
func ProvinceNameLTE(v string) predicate.PhotographCity {
	return predicate.PhotographCity(sql.FieldLTE(FieldProvinceName, v))
}

// ProvinceNameContains applies the Contains predicate on the "province_name" field.
func ProvinceNameContains(v string) predicate.PhotographCity {
	return predicate.PhotographCity(sql.FieldContains(FieldProvinceName, v))
}

// ProvinceNameHasPrefix applies the HasPrefix predicate on the "province_name" field.
func ProvinceNameHasPrefix(v string) predicate.PhotographCity {
	return predicate.PhotographCity(sql.FieldHasPrefix(FieldProvinceName, v))
}

// ProvinceNameHasSuffix applies the HasSuffix predicate on the "province_name" field.
func ProvinceNameHasSuffix(v string) predicate.PhotographCity {
	return predicate.PhotographCity(sql.FieldHasSuffix(FieldProvinceName, v))
}

// ProvinceNameIsNil applies the IsNil predicate on the "province_name" field.
func ProvinceNameIsNil() predicate.PhotographCity {
	return predicate.PhotographCity(sql.FieldIsNull(FieldProvinceName))
}

// ProvinceNameNotNil applies the NotNil predicate on the "province_name" field.
func ProvinceNameNotNil() predicate.PhotographCity {
	return predicate.PhotographCity(sql.FieldNotNull(FieldProvinceName))
}

// ProvinceNameEqualFold applies the EqualFold predicate on the "province_name" field.
func ProvinceNameEqualFold(v string) predicate.PhotographCity {
	return predicate.PhotographCity(sql.FieldEqualFold(FieldProvinceName, v))
}

// ProvinceNameContainsFold applies the ContainsFold predicate on the "province_name" field.
func ProvinceNameContainsFold(v string) predicate.PhotographCity {
	return predicate.PhotographCity(sql.FieldContainsFold(FieldProvinceName, v))
}

// CityCodeEQ applies the EQ predicate on the "city_code" field.
func CityCodeEQ(v string) predicate.PhotographCity {
	return predicate.PhotographCity(sql.FieldEQ(FieldCityCode, v))
}

// CityCodeNEQ applies the NEQ predicate on the "city_code" field.
func CityCodeNEQ(v string) predicate.PhotographCity {
	return predicate.PhotographCity(sql.FieldNEQ(FieldCityCode, v))
}

// CityCodeIn applies the In predicate on the "city_code" field.
func CityCodeIn(vs ...string) predicate.PhotographCity {
	return predicate.PhotographCity(sql.FieldIn(FieldCityCode, vs...))
}

// CityCodeNotIn applies the NotIn predicate on the "city_code" field.
func CityCodeNotIn(vs ...string) predicate.PhotographCity {
	return predicate.PhotographCity(sql.FieldNotIn(FieldCityCode, vs...))
}

// CityCodeGT applies the GT predicate on the "city_code" field.
func CityCodeGT(v string) predicate.PhotographCity {
	return predicate.PhotographCity(sql.FieldGT(FieldCityCode, v))
}

// CityCodeGTE applies the GTE predicate on the "city_code" field.
func CityCodeGTE(v string) predicate.PhotographCity {
	return predicate.PhotographCity(sql.FieldGTE(FieldCityCode, v))
}

// CityCodeLT applies the LT predicate on the "city_code" field.
func CityCodeLT(v string) predicate.PhotographCity {
	return predicate.PhotographCity(sql.FieldLT(FieldCityCode, v))
}

// CityCodeLTE applies the LTE predicate on the "city_code" field.
func CityCodeLTE(v string) predicate.PhotographCity {
	return predicate.PhotographCity(sql.FieldLTE(FieldCityCode, v))
}

// CityCodeContains applies the Contains predicate on the "city_code" field.
func CityCodeContains(v string) predicate.PhotographCity {
	return predicate.PhotographCity(sql.FieldContains(FieldCityCode, v))
}

// CityCodeHasPrefix applies the HasPrefix predicate on the "city_code" field.
func CityCodeHasPrefix(v string) predicate.PhotographCity {
	return predicate.PhotographCity(sql.FieldHasPrefix(FieldCityCode, v))
}

// CityCodeHasSuffix applies the HasSuffix predicate on the "city_code" field.
func CityCodeHasSuffix(v string) predicate.PhotographCity {
	return predicate.PhotographCity(sql.FieldHasSuffix(FieldCityCode, v))
}

// CityCodeEqualFold applies the EqualFold predicate on the "city_code" field.
func CityCodeEqualFold(v string) predicate.PhotographCity {
	return predicate.PhotographCity(sql.FieldEqualFold(FieldCityCode, v))
}

// CityCodeContainsFold applies the ContainsFold predicate on the "city_code" field.
func CityCodeContainsFold(v string) predicate.PhotographCity {
	return predicate.PhotographCity(sql.FieldContainsFold(FieldCityCode, v))
}

// CityNameEQ applies the EQ predicate on the "city_name" field.
func CityNameEQ(v string) predicate.PhotographCity {
	return predicate.PhotographCity(sql.FieldEQ(FieldCityName, v))
}

// CityNameNEQ applies the NEQ predicate on the "city_name" field.
func CityNameNEQ(v string) predicate.PhotographCity {
	return predicate.PhotographCity(sql.FieldNEQ(FieldCityName, v))
}

// CityNameIn applies the In predicate on the "city_name" field.
func CityNameIn(vs ...string) predicate.PhotographCity {
	return predicate.PhotographCity(sql.FieldIn(FieldCityName, vs...))
}

// CityNameNotIn applies the NotIn predicate on the "city_name" field.
func CityNameNotIn(vs ...string) predicate.PhotographCity {
	return predicate.PhotographCity(sql.FieldNotIn(FieldCityName, vs...))
}

// CityNameGT applies the GT predicate on the "city_name" field.
func CityNameGT(v string) predicate.PhotographCity {
	return predicate.PhotographCity(sql.FieldGT(FieldCityName, v))
}

// CityNameGTE applies the GTE predicate on the "city_name" field.
func CityNameGTE(v string) predicate.PhotographCity {
	return predicate.PhotographCity(sql.FieldGTE(FieldCityName, v))
}

// CityNameLT applies the LT predicate on the "city_name" field.
func CityNameLT(v string) predicate.PhotographCity {
	return predicate.PhotographCity(sql.FieldLT(FieldCityName, v))
}

// CityNameLTE applies the LTE predicate on the "city_name" field.
func CityNameLTE(v string) predicate.PhotographCity {
	return predicate.PhotographCity(sql.FieldLTE(FieldCityName, v))
}

// CityNameContains applies the Contains predicate on the "city_name" field.
func CityNameContains(v string) predicate.PhotographCity {
	return predicate.PhotographCity(sql.FieldContains(FieldCityName, v))
}

// CityNameHasPrefix applies the HasPrefix predicate on the "city_name" field.
func CityNameHasPrefix(v string) predicate.PhotographCity {
	return predicate.PhotographCity(sql.FieldHasPrefix(FieldCityName, v))
}

// CityNameHasSuffix applies the HasSuffix predicate on the "city_name" field.
func CityNameHasSuffix(v string) predicate.PhotographCity {
	return predicate.PhotographCity(sql.FieldHasSuffix(FieldCityName, v))
}

// CityNameEqualFold applies the EqualFold predicate on the "city_name" field.
func CityNameEqualFold(v string) predicate.PhotographCity {
	return predicate.PhotographCity(sql.FieldEqualFold(FieldCityName, v))
}

// CityNameContainsFold applies the ContainsFold predicate on the "city_name" field.
func CityNameContainsFold(v string) predicate.PhotographCity {
	return predicate.PhotographCity(sql.FieldContainsFold(FieldCityName, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.PhotographCity) predicate.PhotographCity {
	return predicate.PhotographCity(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.PhotographCity) predicate.PhotographCity {
	return predicate.PhotographCity(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.PhotographCity) predicate.PhotographCity {
	return predicate.PhotographCity(sql.NotPredicates(p))
}
